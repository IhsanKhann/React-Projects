Difference bwtween a library and framework
what are the differences when using react directly and when using a framework.
what is the virtualDom and how it is similar to the normal Dom
why react has its own dom:
is react just javascript
and is react code converted into javascript
how react behind the scenes
what is the app.js the app function and how are we using html in javascript
what is jsx and what is js.
for the understanding of react how is custom react made.

// First the element we want to create is created in js.
The element we want to create in jsx (react) or html in javascript that is converted
into js by bable. (Bable is a traspiler - a compiler of js) that converts
the jsx code into js

when we create an element it is in the form of an object in js. It has
example:
 {type:'a',
 props:'href,target',
 children: content of the element}

this element after creation is pushed into a contaianer (single container) - that container is then
rendered on our browser using the dom that react creates for itself. The (virtualDom) with a similar 
concept it has a tree. The tree has siblings and other things in it.

// normal variable: let VariableName 
// dynamic variable: state (we want to change it)
// Hooks and responsibilites
// Virtual-Dom and props
/ How to use components, how to use propsTypes and defaultprops
/ what are states and how to change them using the useState hook
// what is a hook.
// what is the fibre algorithm and what is the reconcilliation algorithm. how they work, how the manage ui

// how to style css - 3 ways to do it. 1- Inline, 2-External, 3-Modules 
// InlineCSS: good for quick styline
// External: good for large projects
// Modules: also nice for large projects

// Conditional Rendering (Render karna apni marzi sae)

// previous in the useState() -> we have a prev to keep track of the previous
value of the state(dynamic variable)

// importing and exporting multiple things.
// Rendering Lists -> List without keys (when its a simple array)
// Rendering Lists -> List with keys (when there are objects in the array)
// Rendering Lists -> Making a component, using props to make a list
// Rendering Lists -> Use prototypes. Use default prototypes and Use
proto-types
// Rendering Lists -> Use filters
// Use conditional Rendering with lists.

// useCallBack() 
// Dependencies and useCallBack()
// Memoized Function and memoization why use useCallBack()
// Optimization and reRenders
// useEffect() and dependencies
// How is useCallBack() and useEffect() different
// useRef() and why we use it instead of using document.querySelector()
for selecting an element.
// useRef() for selecting an element. Avoid Re-renders for performance.

// Form Handling:
-> Single input field
-> multiple input field
-> events (onChange() and onSubmit())
-> textArea and select

// Routing:
-> React Router Library.
-> Main Provider: BrowserRouting
-> Routes
-> Route path and element
-> Link
-> NavLink to and className and isActive Boolean 
-> Ways of making a wrapper (BrowserRouter) -> 3 ways one the simplest one is
the <BrowerRouter> <App/> </BrowserRouter>

2- use the difficult one using the router inside it use the
{path,element,children}, {path,element,children}, {path,element,children} and so on..

3- use the router = createBrowserRouter(createBrowserElements(
	<Route>
		<Route></Route>
		<Route></Route>
		<Route></Route>
	</Route>
))

-> Dynamic-Data in the link ./user-link
-> fetching api and optimization. 
-> useParams() and loading.
-> using github api for image, followers and other things.
-> useEffect() for fetching and then using the seperate method for fetching
the data.
-> useLoading() hook 
-> Keeping the footer and header at one place while moving freely in the
website. Like the main content changing..
-> relative paths and absolute paths (non relative paths) -> the relative
paths dont have "/" (relative paths basically means the children) -> children
dont have the /
 
-> React Parameters: these are used for the the dynamic urls. Urls with many
children id say or urls with changing values:
-> we put :id or :type whatever with the path which is dynamic
-> we then use a useParams() hook to get this dynamic parameter e.g id.
-> while a loaderfunction is a function used for fetching the url(dynamic)
-> a promise is recieved by the url and we return that promise to the 
function with the useParams and we get and then use that data (an object probably)
like a template/component. inside the function with the useParams().

useParams() and useLoader() 

